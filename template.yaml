AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  A url shortener with an authorizer to allow put requests from a trusted gnupg-key.

Parameters:
  Environment:
    Description: Define environment of deployment. Dev has relaxed grace period and origin.
    Type: String
    AllowedValues:
      - Dev
      - Prd
    Default: Dev
  Arch:
    Description: Architecture used for lambda's.
    Type: String
    AllowedValues:
      - arm64
      - x86_64
    Default: arm64
  PowerToolsVersion:
    Description: Layer version of Lambda Powertools provided by AWS
    Type: String
    Default: 22
  AuthorizerGracePeriod:
    Description: Grace or timeout for signed requests
    Type: Number
    Default: 60
  DomainName:
    Description: R53 Domain with no trailing '.'
    Type: String
  CertificateARN:
    Description: ARN of certificate of Domain
    Type: String
  PublicKeyURL:
    Description: Public key endpoint that serves public keys like KeyBase, an .asc file.
    Type: String

Conditions:
  IsDev: !Equals [!Ref Environment, Dev]
  IsArm: !Equals [!Ref Arch, arm64]

Globals:
  HttpApi:
    CorsConfiguration:
      AllowOrigins:
        - !If [IsDev, "*", "https://scribbd.link"]
      AllowHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
      MaxAge: 300
  Function:
    Timeout: 5
    MemorySize: 256
    Architectures:
      - !Ref Arch
    Runtime: python3.9
    Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
    # Embed Lambda Powertools as a shared Layer
    # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer
    Layers: #
      - !If
        - IsArm
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:${PowerToolsVersion}
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:${PowerToolsVersion}
    Environment:
      Variables:
        # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_METRICS_NAMESPACE: ScribbdUrlShortener
    Tags:
      Project: URLShortener

Resources:
  GnuPGLambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.lambda_handler
      CodeUri: authorizers/gnupg/authorizer
      Description: GnuPG authorizer
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Authorizer
          PUBLIC_KEY_URL: !Ref PublicKeyURL
          GRACE_PERIOD: !Ref AuthorizerGracePeriod
      Tags:
        LambdaPowertools: python

  GnuPGLambdaValidator:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validator.lambda_handler
      CodeUri: authorizers/gnupg/validator/src
      Description: GnuPG validator
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Validator
      Tags:
        LambdaPowertools: python

  ShortenerAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      DisableExecuteApiEndpoint: !If [IsDev, False, True]
      Domain:
        CertificateArn: !Ref CertificateARN
        DomainName: !Ref DomainName
        Route53:
          HostedZoneName: !Sub "${DomainName}."
          IpV6: True
      Auth:
        DefaultAuthorizer: GnuPGLambeAuthorizer
        Authorizers:
          GnuPGLambeAuthorizer:
            EnableSimpleResponses: True
            EnableIamAuthorizer: False
            AuthorizerPayloadFormatVersion: "2.0"
            FunctionArn: !GetAtt GnuPGLambdaAuthorizer.Arn
            Identity:
              Headers:
                - Authorization
      Tags:
        Project: URLShortener

  ValidatorResourcePol:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GnuPGLambdaAuthorizer
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ShortenerAPI}/*"

  SlugTable:
    Type: AWS::Serverless::SimpleTable
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ShortenerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: writer.lambda_handler
      CodeUri: api-backend/shortener/src
      Description: The write/delete function
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Shortener
          SLUG_TABLE: !Ref SlugTable
          VALIDATOR_FUNCTION_NAME: !Ref GnuPGLambdaValidator
      Tags:
        LambdaPowertools: python
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SlugTable
        - LambdaInvokePolicy:
            FunctionName: !Ref GnuPGLambdaValidator
      Events:
        CreateSlug:
          Type: HttpApi
          Properties:
            ApiId: !Ref ShortenerAPI
            Path: /{slug}
            Method: POST
        UpdateSlug:
          Type: HttpApi
          Properties:
            ApiId: !Ref ShortenerAPI
            Path: /{slug}
            Method: PUT
        DeleteSlug:
          Type: HttpApi
          Properties:
            ApiId: !Ref ShortenerAPI
            Path: /{slug}
            Method: DELETE

  ExpanderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: reader.lambda_handler
      CodeUri: api-backend/expander/src
      Description: The unprotected read function
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Expander
          SLUG_TABLE: !Ref SlugTable
      Tags:
        LambdaPowertools: python
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SlugTable
      Events:
        GetRedirect:
          Type: HttpApi
          Properties: 
            ApiId: !Ref ShortenerAPI
            Path: /{slug}
            Method: GET
            Auth:
              Authorizer: NONE

Outputs:
  ApiEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${ShortenerAPI}.execute-api.${AWS::Region}.amazonaws.com"